package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"AI/graph/model"
	"context"
	"fmt"
)

// CameraCreate is the resolver for the cameraCreate field.
func (r *mutationResolver) CameraCreate(ctx context.Context, input model.NewCamera) (*model.Camera, error) {
	panic(fmt.Errorf("not implemented: CameraCreate - cameraCreate"))
}

// CameraUpdate is the resolver for the cameraUpdate field.
func (r *mutationResolver) CameraUpdate(ctx context.Context, input model.NewCamera) (*model.Camera, error) {
	panic(fmt.Errorf("not implemented: CameraUpdate - cameraUpdate"))
}

// CameraDelete is the resolver for the cameraDelete field.
func (r *mutationResolver) CameraDelete(ctx context.Context, input string) (*model.Camera, error) {
	panic(fmt.Errorf("not implemented: CameraDelete - cameraDelete"))
}

// CameraDeleteAll is the resolver for the cameraDeleteAll field.
func (r *mutationResolver) CameraDeleteAll(ctx context.Context) ([]*model.Camera, error) {
	panic(fmt.Errorf("not implemented: CameraDeleteAll - cameraDeleteAll"))
}

// CaseCreate is the resolver for the caseCreate field.
func (r *mutationResolver) CaseCreate(ctx context.Context, input model.NewCase) (*model.Case, error) {
	panic(fmt.Errorf("not implemented: CaseCreate - caseCreate"))
}

// CaseUpdate is the resolver for the caseUpdate field.
func (r *mutationResolver) CaseUpdate(ctx context.Context, input model.NewCase) (*model.Case, error) {
	panic(fmt.Errorf("not implemented: CaseUpdate - caseUpdate"))
}

// CaseDelete is the resolver for the caseDelete field.
func (r *mutationResolver) CaseDelete(ctx context.Context, input string) (*model.Case, error) {
	panic(fmt.Errorf("not implemented: CaseDelete - caseDelete"))
}

// CaseDeleteAll is the resolver for the caseDeleteAll field.
func (r *mutationResolver) CaseDeleteAll(ctx context.Context) ([]*model.Case, error) {
	panic(fmt.Errorf("not implemented: CaseDeleteAll - caseDeleteAll"))
}

// CameraByID is the resolver for the cameraByID field.
func (r *queryResolver) CameraByID(ctx context.Context, input string) (*model.Camera, error) {
	panic(fmt.Errorf("not implemented: CameraByID - cameraByID"))
}

// Cameras is the resolver for the cameras field.
func (r *queryResolver) Cameras(ctx context.Context) ([]*model.Camera, error) {
	panic(fmt.Errorf("not implemented: Cameras - cameras"))
}

// CaseByID is the resolver for the caseByID field.
func (r *queryResolver) CaseByID(ctx context.Context, input string) (*model.Case, error) {
	panic(fmt.Errorf("not implemented: CaseByID - caseByID"))
}

// Cases is the resolver for the cases field.
func (r *queryResolver) Cases(ctx context.Context) ([]*model.Case, error) {
	panic(fmt.Errorf("not implemented: Cases - cases"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
